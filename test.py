from WriteToSrtFile import writeSrtFile

timestamps = ['00:00:00,390', '00:00:00,750', '00:00:01,50', '00:00:01,230', '00:00:01,230', '00:00:01,470', '00:00:01,470', '00:00:01,470', '00:00:03,80', '00:00:03,180', '00:00:03,180', '00:00:03,210', '00:00:03,210', '00:00:03,210', '00:00:03,210', '00:00:03,210', '00:00:03,210', '00:00:03,210', '00:00:03,210', '00:00:03,210', '00:00:03,210', '00:00:03,290', '00:00:03,360', '00:00:03,360', '00:00:03,360', '00:00:03,360', '00:00:03,360', '00:00:04,630', '00:00:06,20', '00:00:06,580', '00:00:06,600', '00:00:07,980', '00:00:08,980', '00:00:08,980', '00:00:08,980', '00:00:08,980', '00:00:08,980', '00:00:08,980', '00:00:08,980', '00:00:08,980', '00:00:08,980', '00:00:08,980', '00:00:09,990', '00:00:09,990', '00:00:10,70', '00:00:10,80', '00:00:10,140', '00:00:10,150', '00:00:10,160', '00:00:10,160', '00:00:10,160', '00:00:10,160', '00:00:10,280', '00:00:10,610', '00:00:10,610', '00:00:10,610', '00:00:10,610', '00:00:10,610', '00:00:10,930', '00:00:11,390', '00:00:11,620', '00:00:11,830', '00:00:11,850', '00:00:12,120', '00:00:12,540', '00:00:12,540', '00:00:13,830', '00:00:13,830', '00:00:13,830', '00:00:14,250', '00:00:14,250', '00:00:14,300', '00:00:14,300', '00:00:14,300', '00:00:14,300', '00:00:14,300', '00:00:14,300', '00:00:14,300', '00:00:14,300', '00:00:14,300', '00:00:14,300', '00:00:14,300', '00:00:14,300', '00:00:14,300', '00:00:14,300', '00:00:15,300', '00:00:15,720', '00:00:15,980', '00:00:17,200', '00:00:17,200', '00:00:17,200', '00:00:17,300', '00:00:17,300', '00:00:17,300', '00:00:17,300', '00:00:17,300', '00:00:18,550', '00:00:19,10', '00:00:19,560', '00:00:20,850', '00:00:20,850', '00:00:20,850', '00:00:20,850', '00:00:20,850', '00:00:21,760', '00:00:21,780', '00:00:22,500', '00:00:22,520', '00:00:22,600', '00:00:22,620', '00:00:22,620', '00:00:22,740', '00:00:23,740', '00:00:24,80', '00:00:24,190', '00:00:24,380', '00:00:24,520', '00:00:24,570', '00:00:25,30', '00:00:25,810', '00:00:25,810', '00:00:25,810', '00:00:25,810', '00:00:25,860', '00:00:26,250', '00:00:26,260', '00:00:26,370', '00:00:26,920', '00:00:29,550', '00:00:30,280', '00:00:30,280', '00:00:30,280', '00:00:30,280', '00:00:30,280', '00:00:30,280', '00:00:30,320', '00:00:30,390', '00:00:30,700', '00:00:30,700', '00:00:30,700', '00:00:31,790', '00:00:31,810', '00:00:31,970', '00:00:31,970', '00:00:32,210', '00:00:32,240', '00:00:32,460', '00:00:32,540', '00:00:32,590', '00:00:32,590', '00:00:32,620', '00:00:32,790', '00:00:32,900', '00:00:33,50', '00:00:33,190', '00:00:33,260', '00:00:33,360', '00:00:33,470', '00:00:33,510', '00:00:33,520', '00:00:33,590', '00:00:33,720', '00:00:33,720', '00:00:38,200', '00:00:38,200', '00:00:38,480', '00:00:38,550', '00:00:38,550', '00:00:38,570', '00:00:38,570', '00:00:38,800', '00:00:39,60', '00:00:39,60', '00:00:39,60', '00:00:39,100', '00:00:39,130', '00:00:39,140', '00:00:39,140', '00:00:39,140', '00:00:39,140', '00:00:39,140', '00:00:39,140', '00:00:39,140', '00:00:39,320', '00:00:39,330', '00:00:39,600', '00:00:39,800', '00:00:39,800', '00:00:39,800', '00:00:39,800', '00:00:39,800', '00:00:39,800', '00:00:39,800', '00:00:39,800', '00:00:39,810', '00:00:40,740', '00:00:40,1000', '00:00:40,1000', '00:00:41,40', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640', '00:00:41,640']

words = [' Dans', ' cette', ' première', ' vidéo', ' de', ' la', ' série', ' sur', ' E', 'ater', 'T', 'ools,', ' tu', ' vas', ' apprendre', ' à', ' quoi', ' sert', ' la', ' fonction', ' CO', 'UN', 'T', ' et', ' comment', ' l', "'", 'util', 'iser.', ' E', 'ater', 'T', 'ools', ' c', "'", 'est', ' un', ' module', ' nat', 'if', ' à', ' pit', 'on', ' qui', ' a', ' plein', ' de', ' fon', 'ctions', ' qui', ' nous', ' permett', 'ent', ' de', ' créer', ' des', ' id', 'ér', 'ateurs', ' effic', 'aces', ' et', ' rap', 'ides.', ' Donc', ' comme', ' son', ' nom', ' l', "'", 'ind', 'ique,', ' CO', 'UN', 'T', ' CO', 'UN', 'TS', ' et', ' ça', ' jusqu', "'", 'à', ' l', "'", 'inf', 'ini.', ' Cette', ' fonction', ' va', ' ac', 'cep', 'ter', ' deux', ' arguments', ' option', 'nels.', ' Le', ' premier', ' concer', 'ne', ' le', ' nombre', ' de', ' départ,', ' sa', ' valeur', ' par', ' déf', 'aut', ' est', ' 0.', ' Et', ' le', ' deuxième', ' le', ' pas,', ' qui', ' est', ' ét', 'ab', 'li', ' à', ' 1', ' par', ' déf', 'aut.', ' Je', ' veux', ' faire', ' un', ' programme', ' qui', ' compte', ' de', ' 10', ' à', ' 0.', ' Donc', ' je', ' commence', ' le', ' compt', 'eur', ' à', ' 10', ' et', ' je', ' mets', ' le', ' pas', ' à', ' moins', ' 1', ' comme', ' ça', ' on', ' compte', ' à', ' l', "'", 'en', 'vers.', ' Ensuite', ' je', ' fais', ' une', ' bou', 'cle', ' qui', ' va', ' aff', 'icher', ' chaque', ' valeur', ' et', ' je', ' mets', ' un', ' break', ' quand', ' le', ' i', ' atte', 'int', ' 0', ' parce', ' que', ' sinon', ' le', ' code', ' va', ' continuer', ' jusqu', "'", 'à', ' l', "'", 'inf', 'ini.', ' Si', ' tu', ' as', ' trouvé', ' cette', ' vidéo', ' ut', 'ile', ' n', "'", 'hés', 'ite', ' pas', ' à', ' t', "'", 'ab', 'onner', ' pour', ' plus.']

# print(*list(map(len, [words, timestamps])))

# pour rassembler les mots qui commencent pas par un espace
def clean_word_list(words : list[str], timestamps : list[str]):
    """
    The clean_word_list function takes a list of words and returns a new list with the 
    words cleaned up. The function removes any leading or trailing whitespace, and combines 
    any words that were separated by whitespace in the original string. For example, if we pass 
    the string &quot;hello   there&quot; to this function it will return [&quot;hello&quot;, &quot;there&quot;].
    
    Parameters
    ----------
        words : list
            Pass a list of words to the function
    
    Returns
    -------
    
        A list of words with the first letter removed
    """
    word_list = []
    timestamp = []
    temp_timestamp = []
    for i, word in enumerate(words):
        if word[0] == " ":
            word_list.append(word)
            timestamp.append(timestamps[i])
            if len(temp_timestamp) > 0:
                timestamp[-1] = temp_timestamp[0]
                temp_timestamp = []
        else:
            word_list[-1] += word
            temp_timestamp.append(timestamps[i])
            
    return word_list, timestamp

word, time = clean_word_list(words, timestamps)
print(list(map(len, [word, time])))

# return [wordlist, [start, end]]
def create_groups(word : list[str], time : list):
    final = []
    for i, word in enumerate(word):
        